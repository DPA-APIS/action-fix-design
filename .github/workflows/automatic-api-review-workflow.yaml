
name: automatic-api-review
on:
  workflow_call
  
env:
  RED: '\033[31m'
  GREEN: '\033[32m'
  YELLOW: '\033[33m'
  RESET: '\033[m'
  BASE_BRANCH: 'master'
  API_DIRECTORY: 'api/'
  FUNCIONALITY_ENABLED: 'TRUE' # TRUE: habilitado, FALSE: deshabilitado
  GIT_ACTION_USER_NAME: 'gobiernoapis[bot]'
  GIT_ACTION_USER_EMAIL: 'diomedex10@gmail.com'
  MSG_COMMIT_UPD_OPENAPI_VERSION: 'Actualizando version correcta del contrato OpenAPI'
  MSG_LAST_COMMIT: 'REVISAR-CONTRATO'
  VALID_API_TYPES: 'channel,business,core,dt' # Para desactivar todos configurar con 'none'
  TAG_VERSION_REGEX: '^v([0-9]+)\.([0-9]+)\.([0-9]+)?$'
  TAG_VERSION_SNAPSHOT_REGEX: '^v([0-9]+)\.([0-9]+)\.([0-9]+)(-SNAPSHOT)?$'
  OPENAPI_VERSION_REGEX: '^([0-9]+)\.([0-9]+)\.([0-9]+)?$'
  OPENAPI_IGNORE_KEYS: |
    example
    summary
    description
    tags
    externalDocs
    contact
    license
    version
    security
    securitySchemes
  OPENAPI_SNAPSHOT_IGNORE_KEYS_BS_CR: |
    maxItems  
  OPENAPI_SNAPSHOT_IGNORE_KEYS_UX: |
    maxItems, pattern
  
jobs:
  review-api:
    name: Revisar API
    runs-on: ubuntu-latest
    steps:
      - name: Clonar Repositorio de API
        id: checkout_repo_api
        if: ${{ env.FUNCIONALITY_ENABLED == 'TRUE' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Validar mensaje de commit
        shell: bash
        id: validate_last_commit_msg
        if: ${{ steps.checkout_repo_api.outcome == 'success' }}
        run: |
          # Validar ultimo mensaje del commit
          msg_last_commit=`git log --format=%B -n 1 HEAD | head -n 1`
          echo -e $YELLOW"********* Validando ultimo mensaje del commit: '$msg_last_commit'."$RESET
          if [ $msg_last_commit = $MSG_LAST_COMMIT ]; then
            result="TRUE"
            echo -e $GREEN"********* Mensaje de commit VALIDO."$RESET
          else
            result="FALSE"
            echo -e $RED"********* Mensaje de commit INVALIDO. El mensaje debe ser: '$MSG_LAST_COMMIT'."$RESET >&2
            exit 1
          fi
          echo "is_valid=$result" >> $GITHUB_OUTPUT

      - name: Generar token de acceso
        id: gh_app
        shell: bash
        if: ${{ steps.validate_last_commit_msg.outputs.is_valid == 'TRUE' }}
        env:
          PRIVATE_KEY: ${{ secrets.GH_APP_PK_AUTOMATIC_API_REVIEW }}  # Clave privada
          APP_ID: ${{ vars.GH_APP_ID_AUTOMATIC_API_REVIEW }}  # ID de la GitHub App
          ORGANIZATION: ${{ github.repository_owner }}  # Organización o propietario del repositorio
        run: |
          # Guardar la clave privada en un archivo temporal
          #cat <<EOF > private-key.pem
          #${PRIVATE_KEY}
          #EOF

          printf "%b" "$PRIVATE_KEY" > private-key.pem

          # Generar JWT
          now=$(date +%s)
          iat=$((${now} - 60)) # Emitido hace 60 segundos
          exp=$((${now} + 600)) # Expira en 10 minutos

          b64enc() { openssl base64 -e -A | tr -d '=' | tr '/+' '_-' | tr -d '\n'; }

          header_json='{
              "typ":"JWT",
              "alg":"RS256"
          }'
          header=$(echo -n "${header_json}" | b64enc)

          payload_json="{
              \"iat\":${iat},
              \"exp\":${exp},
              \"iss\":\"${APP_ID}\"
          }"
          payload=$(echo -n "${payload_json}" | b64enc)

          header_payload="${header}.${payload}"
          signature=$(echo -n "${header_payload}" | openssl dgst -sha256 -sign private-key.pem | b64enc)

          jwt_token="${header_payload}.${signature}"

          # Obtener ID de instalación
          installations=$(curl -s -H "Authorization: Bearer $jwt_token" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations)
          installation_id=$(echo "$installations" | jq -r --arg org "$ORGANIZATION" '.[] | select(.account.login == $org) | .id')

          if [ -z "$installation_id" ]; then
            echo "No matching account found for the provided organization."
            exit 1
          fi

          # Obtener token de acceso
          access_token=$(curl -s -X POST -H "Authorization: Bearer $jwt_token" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations/$installation_id/access_tokens | jq -r '.token')

          if [ -z "$access_token" ]; then
            echo "Failed to obtain access token."
            exit 1
          fi

          # Exportar el token de acceso como variable de salida
          echo "token=$access_token" >> $GITHUB_OUTPUT


      
      - name: Obtener tipo de API
        shell: bash
        id: get_api_type
        #if: ${{ steps.lint_api.outcome == 'success' }}
        if: ${{ steps.gh_app.outcome == 'success' }}
        run: |
          # Obtener tipo de API a partir del nombre de repositorio
          git_repo_name="${{ github.event.repository.name }}"
          api_type=$(echo $git_repo_name | cut -d'-' -f1)
          echo -e $GREEN"******** El tipo de API es: '$api_type'."$RESET
          echo "api_type=$api_type" >> $GITHUB_OUTPUT
  
      - name: Validar tipo de API habilitado
        shell: bash
        id: validate_api_type
        if: ${{ steps.get_api_type.outputs.api_type != '' }}
        run: |
          # Validar si el tipo de API esta habilitado para iniciar con la revision automatica
          api_type=${{ steps.get_api_type.outputs.api_type }}
          echo -e $YELLOW"******** Validando el tipo de API '$api_type'."$RESET
          IFS=',' read -r -a api_types <<< $VALID_API_TYPES
          for type in "${api_types[@]}"; do
            if [[ $api_type == "$type" ]]; then
              result="TRUE"
              echo -e $GREEN"******** El tipo de API '$api_type' es VALIDO."$RESET
              break
            fi
          done
          if [[ $result != 'TRUE' ]]; then
            echo -e $RED"********* El tipo de API '$api_type' NO es VALIDO para iniciar la revision automatica."$RESET >&2
            exit 1
          fi
          echo "is_valid=$result" >> $GITHUB_OUTPUT

      - name: Obtener versión del OpenAPI (info.version)
        id: read_openapi_version
        if: ${{ steps.validate_api_type.outputs.is_valid == 'TRUE' }} 
        run: |
          # Lee la versión del archivo OpenAPI
          GIT_REPO_NAME="${{ github.event.repository.name }}"
          API_DIRECTORY="${{ env.API_DIRECTORY }}"
          OPENAPI_VERSION=$(yq '.info.version' "${API_DIRECTORY}${GIT_REPO_NAME}.yaml")

          echo -e $GREEN"********* Versión en OpenAPI: $OPENAPI_VERSION"$RESET
          # Exportar en outputs
          echo "openapi_version=$OPENAPI_VERSION" >> "$GITHUB_OUTPUT"

      - name: Validar Formato versión OpenAPI (info.version)
        id: validate_version_regex
        shell: bash
        if: ${{ steps.read_openapi_version.outputs.openapi_version != '' }}
        run: |
          # Validar si el ultimo tag tiene el correcto patron regex
          regex="$OPENAPI_VERSION_REGEX"
          version="${{ steps.read_openapi_version.outputs.openapi_version }}"
          
          if echo "$version" | grep -Eq "$regex"; then
            result="true"
            echo -e $GREEN"******** La version '$version' es VALIDA y cumple con el patron regex."$RESET
          else
            result="false"
            echo -e $RED"******** La version '$version' NO es valida y NO cumple con el patron regex '$regex'."$RESET >&2
            exit 1
          fi
          echo "is_valid=$result" >> $GITHUB_OUTPUT

      - name: Obtener el último tag Revisado
        id: get_latest_tag
        shell: bash
        if: ${{ steps.validate_version_regex.outputs.is_valid == 'true' }}
        run: |
          set -e
          
          # 1. Obtener la versión del OpenAPI desde el paso anterior
          OPENAPI_VERSION="${{ steps.read_openapi_version.outputs.openapi_version }}"
          
          # 2. Parsear el major, minor y patch
          #    Asumiendo que la versión SIEMPRE es "X.Y.Z" (con 3 partes)
          major=$(echo "$OPENAPI_VERSION" | cut -d'.' -f1)
          minor=$(echo "$OPENAPI_VERSION" | cut -d'.' -f2)
          patch=$(echo "$OPENAPI_VERSION" | cut -d'.' -f3)
          
          echo -e $YELLOW"Versión en OpenAPI = $OPENAPI_VERSION"$RESET
          echo -e $YELLOW"Major = $major, Minor = $minor, Patch = $patch"$RESET
          
          # 3. Hacer fetch de todos los tags
          git fetch --tags
          
          # 4. Listar todos los tags que empiecen con "v{major}." (ej: "v1.")
          #    Ordenarlos de mayor a menor usando el orden semver (hay varias formas);
          #    una forma simple es usar "sort -V".
          #    Ej: Si major=1 => "v1.*"
          tags_version_major=$(git tag --list "v${major}.*" | sort -V)
          
          # 5. Tomar el último (el más "grande" semver) => tail -n1
          latest_tag=$(echo "$tags_version_major" | tail -n1)
          
          if [ -n "$latest_tag" ]; then
            echo -e $GREEN"********* El ultimo tag encontrado es: '$latest_tag'."$RESET
            echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          else
            echo -e $RED"********* No se encontraron tags en el repositorio. Debe pasar por revision de gobierno de APIs para generar el primer tag."$RESET >&2
            exit 1
          fi

      - name: Validar formato ultimo tag Revisado
        id: validate_latest_tag_regex
        shell: bash
        if: ${{ steps.get_latest_tag.outputs.latest_tag != '' }}
        run: |
          # Validar si el ultimo tag tiene el correcto patron regex
          regex="$TAG_VERSION_SNAPSHOT_REGEX"
          tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
          
          if echo "$tag" | grep -Eq "$regex"; then
            result="true"
            echo -e $GREEN"******** El ultimo tag '$tag' es VALIDO y cumple con el patron regex."$RESET
          else
            result="false"
            echo -e $RED"******** El ultimo tag '$tag' NO es VALIDO y NO cumple con el patron regex '$regex'."$RESET >&2
            exit 1
          fi
          echo "is_valid=$result" >> $GITHUB_OUTPUT

      - name: Generar versión del nuevo tags
        id: validate_sequential_version
        shell: bash
        if: ${{ steps.validate_latest_tag_regex.outcome == 'success' }}
        run: |
          set -e

          # 1) Variables de entorno provenientes de pasos anteriores
          openapi_version="${{ steps.read_openapi_version.outputs.openapi_version }}"
          last_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
          
          # 2) Quitamos la 'v' y  "-SNAPSHOT" del último tag -> "1.0.8"
          LAST_TAG_STRIPPED=${last_tag%-SNAPSHOT}
          LAST_TAG_STRIPPED="${LAST_TAG_STRIPPED#v}"

          echo -e $YELLOW"Versión del OpenAPI: $openapi_version"$RESET
          echo -e $YELLOW"Último tag encontrado: $last_tag"$RESET
          echo -e $YELLOW"Último tag VALIDO (sin 'v'): $LAST_TAG_STRIPPED"$RESET

          # 3) Parsear (major, minor, patch) de ambos
          openapi_major=$(echo "$openapi_version" | cut -d'.' -f1)
          openapi_minor=$(echo "$openapi_version" | cut -d'.' -f2)
          openapi_patch=$(echo "$openapi_version" | cut -d'.' -f3)

          last_tag_major=$(echo "$LAST_TAG_STRIPPED" | cut -d'.' -f1)
          last_tag_minor=$(echo "$LAST_TAG_STRIPPED" | cut -d'.' -f2)
          last_tag_patch=$(echo "$LAST_TAG_STRIPPED" | cut -d'.' -f3)

          # 4) Verificar la secuencialidad estricta:
          #    - Mismo major
          #    - Mismo minor
          #    - patch == last_tag_patch + 1

          tags_new_version="v${openapi_version}"
          if [ "$openapi_major" -eq "$last_tag_major" ] && \
            [ "$openapi_minor" -eq "$last_tag_minor" ] && \
            [ "$openapi_patch" -eq $(( last_tag_patch + 1 )) ]; then
            echo -e $GREEN"********* La NUEVA versión del tags es: $tags_new_version."$RESET
            echo "is_valid=TRUE" >> $GITHUB_OUTPUT
            echo "tags_new_version=$tags_new_version" >> $GITHUB_OUTPUT
          else
            echo -e $RED"********* La versión del OpenAPI ($openapi_version) no cumple la secuencia esperada."$RESET
            echo -e $RED"********* Se esperaba que fuera $last_tag_major.$last_tag_minor.$(( last_tag_patch + 1 )) (basado en el último tag: $last_tag)."$RESET
            exit 1
          fi

      - name: Validar formato del nuevo tag
        id: validate_tag_regex
        shell: bash
        if: ${{ steps.validate_sequential_version.outputs.tags_new_version != '' }}
        run: |
          # Validar si el ultimo tag tiene el correcto patron regex
          regex="$TAG_VERSION_REGEX"
          tag="${{ steps.validate_sequential_version.outputs.tags_new_version }}"
          
          if echo "$tag" | grep -Eq "$regex"; then
            result="true"
            echo -e $GREEN"******** El tag '$tag' es VALIDO y cumple con el patron regex."$RESET
          else
            result="false"
            echo -e $RED"******** El tag '$tag' NO es VALIDO y NO cumple con el patron regex '$regex'."$RESET >&2
            exit 1
          fi
          echo "is_valid=$result" >> $GITHUB_OUTPUT

      - name: Obtener archivo BASE y REVISION
        id: generate_files_base_revision
        if: ${{ steps.validate_tag_regex.outputs.is_valid == 'true' }}
        run: |
          #Creamos un directorio para almacenar los 2 YAML(BASE y REVISION)
          mkdir -p specs

          GIT_REPO_NAME="${{ github.event.repository.name }}"
          API_DIRECTORY="${{ env.API_DIRECTORY }}"
          api_path_file="${API_DIRECTORY}${GIT_REPO_NAME}.yaml"

          # Obtenemos el archivo base.yaml
          if [ -f "$api_path_file" ]; then
            echo -e $GREEN"********* Moviendo archivo REVISION: specs/revision.yaml"$RESET
            cp "$api_path_file" specs/revision.yaml
          else
            echo -e $RED"********* No existe ningún archivo YAML en la rama del PR."$RESET
            exit 1
          fi

          # Guardar SHA y mostrar info
          last_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
          last_tag_sha=$(git rev-list -n 1 "$last_tag")
        
          #Extraemos el archivo base (desde el último tag)
          git checkout "$last_tag_sha" -- "$api_path_file"

          # Validamos que en la carpeta 'api/' exista al menos un .yaml
          if [ -f "$api_path_file" ]; then
            echo -e $GREEN"********* Moviendo archivo BASE: specs/base.yaml"
            mv "$api_path_file" specs/base.yaml
          else
            echo -e $RED"********* No existe ningún archivo YAML en el ultimo tag."$RESET
            exit 1
          fi

          # Esto deja en specs/:
          #   base.yaml     (del último tag)
          #   revision.yaml (del commit del PR)  
          
      - name: Ejecutar comparaciones con oasdiff
        id: oas_diff
        uses: DPA-APIS/oasdiff-action/diff@v1.0.0
        if: ${{ steps.generate_files_base_revision.outcome == 'success' }}
        with:
          base: 'specs/base.yaml'
          revision: 'specs/revision.yaml'
          format: json
          gh_app: ${{ steps.gh_app.outputs.token }}

      - name: Guardar contenido del diff
        id: save_diff
        if: ${{ steps.oas_diff.outcome == 'success' }}
        run: |
          echo -e $YELLOW"Guardando JSON de Diff"$RESET
          cat <<'HERE' > diff-result.json
          ${{ steps.oas_diff.outputs.diff }}
          HERE

          echo -e $YELLOW"Validando diff-result.json con jq"$RESET
          jq --exit-status . diff-result.json > /dev/null
          echo -e $GREEN"********** JSON VALIDO"$RESET

      - name: Procesar resultado de comparacion (BS y CR)
        if: ${{ steps.oas_diff.outcome == 'success' }}
        id: process_diff
        #uses: ./.github/actions/process-diff 
        uses: DPA-APIS/action-fix-design/.github/actions/process-diff@fix-fase02

        with:
          diff-file: 'diff-result.json'
          api-type: ${{ steps.get_api_type.outputs.api_type }}

      - name: Generar token de acceso para crear PR
        id: gh_app_pr
        if: ${{ steps.process_diff.outputs.is_fix == 'true' || steps.process_diff.outputs.is_snapshot == 'true' }}
        shell: bash
        env:
          APP_ID: ${{ vars.GH_APP_ID_PR_FIX_DESIGN_ACTION }}
          PRIVATE_KEY: ${{ secrets.GH_APP_PK_PR_FIX_DESIGN_ACTION }}
          ORGANIZACION: ${{ github.repository_owner }}
        run: |
          # Variables necesarias
          client_id=$APP_ID
          PRIVATE_KEY=$PRIVATE_KEY
          ORGANIZATION=$ORGANIZACION          
          # Verificar si la clave privada está presente
          if [ -z "$PRIVATE_KEY" ]; then
            echo "Private key is missing."
            exit 1
          fi          
          # Generar JWT
          now=$(date +%s)
          iat=$((${now} - 60)) # Emitido hace 60 segundos
          exp=$((${now} + 600)) # Expira en 10 minutos          
          b64enc() { openssl base64 -e -A | tr -d '=' | tr '/+' '_-' | tr -d '\n'; }          
          header_json='{
              "typ":"JWT",
              "alg":"RS256"
          }'
          # Codificar el encabezado
          header=$(echo -n "${header_json}" | b64enc)          
          payload_json="{
              \"iat\":${iat},
              \"exp\":${exp},
              \"iss\":\"${client_id}\"
          }"
          # Codificar el payload
          payload=$(echo -n "${payload_json}" | b64enc)          
          # Firmar el JWT
          header_payload="${header}.${payload}"
          signature=$(echo -n "${header_payload}" | openssl dgst -sha256 -sign <(echo -n "${PRIVATE_KEY}") | b64enc)          
          # Crear el JWT
          jwt_token="${header_payload}.${signature}"          
          # Obtener instalaciones
          installations=$(curl -s -H "Authorization: Bearer $jwt_token" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations)          
          # Encontrar ID de instalación
          installation_id=$(echo "$installations" | jq -r --arg org "$ORGANIZATION" '.[] | select(.account.login == $org) | .id')          
          if [ -z "$installation_id" ]; then
            echo "No matching account found for the provided organization."
            exit 1
          fi          
          echo "ID de instalación seleccionado: $installation_id"          
          # Obtener token de acceso
          access_token=$(curl -s -X POST -H "Authorization: Bearer $jwt_token" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations/$installation_id/access_tokens | jq -r '.token')          
          if [ -z "$access_token" ]; then
            echo "Failed to obtain access token."
            exit 1
          fi          
          # Exportar el token de acceso como variable de entorno
          echo "token=$access_token" >> $GITHUB_OUTPUT    

      - name: Configurar usuario git
        shell: bash
        id: config_git
        if: ${{ steps.gh_app_pr.outcome == 'success' }}
        run: |
          # Configurar usuario de github action que realizara las operaciones GIT
          sudo chown -R "${USER:-$(id -un)}" .
          git config --global user.name $GIT_ACTION_USER_NAME
          git config --global user.email $GIT_ACTION_USER_EMAIL

          #Configurar el romote con el Token
          git remote set-url origin "https://x-access-token:${{ steps.gh_app.outputs.token }}@github.com/${{ github.repository }}.git"

      - name: Crear Pull Request
        id: create_pr
        if: ${{ steps.config_git.outcome == 'success' }}
        env:
          GH_TOKEN: ${{ steps.gh_app_pr.outputs.token }}
        run: |
          # Crear el template del PR directamente
          cat > pr_template.md << 'EOF'
          ## Descripción
          
          Este Pull Request ha sido generado automáticamente por el sistema de revisión de APIs tipo FIX.
          
          ## Información técnica
          
          - **Versión OpenAPI**: ${{ steps.read_openapi_version.outputs.openapi_version }}
          - **Último tag**: ${{ steps.get_latest_tag.outputs.latest_tag }}
          - **Nuevo tag**: ${{ steps.validate_sequential_version.outputs.tags_new_version }}
          - **Tipo de API**: ${{ steps.get_api_type.outputs.api_type }}
          - **Tipo de cambio**: ${{ steps.process_diff.outputs.is_fix == 'true' && 'FIX' || 'SNAPSHOT' }}

          ---

          *Este PR fue generado automáticamente por GitHub Actions*
          EOF
          
          gh pr create --title "${GITHUB_REF_NAME}" --body-file pr_template.md

      - name: Aprobar Pull Request
        if: ${{ steps.create_pr.outcome == 'success' }}
        id: approval_pr
        run: |
          echo "${{ steps.gh_app.outputs.token }}" | gh auth login --with-token
          gh pr review --approve

      - name: Merge Pull Request
        id: merge_pr
        if: ${{ steps.approval_pr.outcome == 'success' }}
        run: |
           gh pr merge --merge --admin

      - id: checkout_base_branch
        if: ${{ steps.merge_pr.outcome == 'success' }}
        uses: actions/checkout@v4
        with: 
          ref: ${{ github.event.repository.default_branch }}
          token: ${{ steps.gh_app.outputs.token }}

      - name: Generar tag
        id: generate_tag
        shell: bash
        if: ${{ steps.validate_sequential_version.outputs.tags_new_version != null}}
        run: |
          # Generar tag en GIT para la version fix
          tag="${{ steps.validate_sequential_version.outputs.tags_new_version }}"
          is_snapshot="${{ steps.process_diff.outputs.is_snapshot }}"
          if [[ $is_snapshot == 'true' ]]; then
            tag="$tag-SNAPSHOT"
          fi

          git tag -a "$tag" -m "$tag"
          git push origin "${tag}"
          echo -e $GREEN"******** Se genero tag '$tag' en GIT para la nueva version FIX."$RESET